openapi: 3.0.1
info:
  contact:
    email: dev@dhis2.org
    x-status-dhis2: template
  description: >
    <!-- auto-inserted: do not edit here -->
    The Web API is a component which makes it possible for external systems
    to access and manipulate data stored in an instance of DHIS2. More
    precisely, it provides a programmatic interface to a wide range of
    exposed data and service methods for applications such as third-party
    software clients, web portals and internal DHIS2 modules.
    
    # Introduction
    
    The Web API adheres to many of the principles behind the REST
    architectural style. To mention some few and important ones:
    
    1.  The fundamental building blocks are referred to as *resources*. A
        resource can be anything exposed to the Web, from a document to a
        business process - anything a client might want to interact with.
        The information aspects of a resource can be retrieved or exchanged
        through resource *representations*. A representation is a view of a
        resource's state at any given time. For instance, the *reportTable*
        resource in DHIS2 represents a tabular report of aggregated data for
        a certain set of parameters. This resource can be retrieved in a
        variety of representation formats including HTML, PDF, and MS Excel.
    
    2.  All resources can be uniquely identified by a *URI* (also referred
        to a/s *URL*). All resources have a default representation. You can
        indicate that you are interested in a specific representation by
        supplying an *Accept* HTTP header, a file extension or a *format*
        query parameter. So in order to retrieve the PDF representation of a
        report table you can supply a *Accept: application/pdf* header or
        append *.pdf* or *?format=pdf* to your request URL.
    
    3.  Interactions with the API requires correct use of HTTP *methods* or
        *verbs*. This implies that for a resource you must issue a *GET*
        request when you want to retrieve it, *POST* request when you want
        to create one, *PUT* when you want to update it and *DELETE* when
        you want to remove it. So if you want to retrieve the default
        representation of a report table you can send a GET request to e.g.
        */reportTable/iu8j/hYgF6t*, where the last part is the report table
        identifier.
    
    4.  Resource representations are *linkable*, meaning that
        representations advertise other resources which are relevant to the
        current one by embedding links into itself (please be aware that you
        need to request *href* in your field filter to have this working.
        This feature greatly improves the usability and robustness of the
        API as we will see later. For instance, you can easily navigate to
        the indicators which are associated with a report table from the
        *reportTable* resource through the embedded links using your
        preferred representation format.
    
    While all of this might sound complicated, the Web API is actually very
    simple to use. We will proceed with a few practical examples in a
    minute.
    
    ## Web API versions
    
    The Web API is versioned starting from DHIS 2.25. The API versioning
    follows the DHIS 2 major version numbering. As an example, the API
    version for DHIS 2.30 is *30*.
    
    You can access a specific API version by including the version number
    after the */api* component, as an example like this:
    
        /api/29/dataElements
    
    If you omit the version part of the URL, the system will use the current
    API version. As an example, for DHIS 2.30, when omitting the API part,
    the system will use API version 30. When developing API clients it is
    recommended to use explicit API versions (rather than omitting the API
    version), as this will protect the client from unforeseen API changes.
    
    The last three API versions will be supported. As an example, DHIS
    version 2.30 supports API version 28, 29 and 30.
    
    Note that the metadata model is not versioned, and that you might
    experience changes e.g. in associations between objects. These changes
    will be documented in the DHIS2 major version release notes.
    
    # Authentication
    
    The DHIS2 Web API supports two protocols for authentication, Basic
    Authentication and OAuth 2. You can verify and get information about the
    currently authenticated user by making a GET request to the following
    URL:
    
        /api/26/me
    
    And more information about authorities (and if a user have a certain
    authority) by using the endpoints:
    
        /api/26/me/authorities
        /api/26/me/authorities/ALL
    
    ## Basic Authentication
    
    The DHIS2 Web API supports *Basic authentication*. Basic authentication
    is a technique for clients to send login credentials over HTTP to a web
    server. Technically speaking, the username is appended with a colon and
    the password, Base64-encoded, prefixed Basic and supplied as the value
    of the *Authorization* HTTP header. More formally that is`
    Authorization: Basic
    base64encode(username:password)` Most network-aware development
    frameworks provides support for authentication using Basic, such as
    Apache HttpClient, Spring RestTemplate and C\# WebClient. An important
    note is that this authentication scheme provides no security since the
    username and password is sent in plain text and can be easily decoded.
    Using it is recommended only if the server is using SSL/TLS (HTTPS) to
    encrypt communication between itself and the client. Consider it a hard
    requirement to provide secure interactions with the Web API.
    
    ## OAuth2
    
    DHIS2 supports the OAuth2 authentication protocol. OAuth2 is an open
    standard for authorization which it allows third-party clients to
    connect on behalf of a DHIS2 user and get a reusable bearer token for
    subsequent requests to the Web API. DHIS 2 does not support fine-grained
    OAuth2 roles but rather provides applications access based on user roles
    of the DHIS2 user.
    
    Each client for which you want to allow OAuth 2 authentication must be
    registered in DHIS2. To add a new OAuth2 client go to *Apps \> Settings
    \> OAuth2 Clients*, click add new and enter the desired client name and
    the grant types.
    
    ### Adding a client using the Web API
    
    An OAuth2 client can be added through the Web API. As an example we can
    send a payload like this:
    
        {
           "name" : "OAuth2 Demo Client",
           "cid" : "demo",
           "secret" : "1e6db50c-0fee-11e5-98d0-3c15c2c6caf6",
           "grantTypes" : [
              "password",
              "refresh_token",
              "authorization_code"
           ],
           "redirectUris" : [
              "http://www.example.org"
           ]
        }
    
        SERVER="https://play.dhis2.org/dev"
        curl -X POST -H "Content-Type: application/json" -d @client.json 
          -u admin:district $SERVER/api/oAuth2Clients
    
    We will use this client as the basis for our next grant type examples.
    
    ### Grant type password
    
    The simplest of all grant types is the **password** grant type. This
    grant type is similar to basic authenticaion in the sense that it
    requires the client to collect the users username and password. As an
    example we can use our demo server:
    
        SERVER="https://play.dhis2.org/dev"
        SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"
        
        curl -X POST -H "Accept: application/json" -u demo:$SECRET $SERVER/uaa/oauth/token
        -d grant_type=password -d username=admin -d password=district
    
    This will give you a response similar to this:
    
        {
           "expires_in" : 43175,
           "scope" : "ALL",
           "access_token" : "07fc551c-806c-41a4-9a8c-10658bd15435",
           "refresh_token" : "a4e4de45-4743-481d-9345-2cfe34732fcc",
           "token_type" : "bearer"
        }
    
    For now, we will concentrate on the **access\_token**, which is what we
    will use as our authentication (bearer) token. As an example we will get
    all data elements using our token:
    
        SERVER="https://play.dhis2.org/dev"
        curl -H "Authorization: Bearer 07fc551c-806c-41a4-9a8c-10658bd15435" $SERVER/api/26/dataElements.json
    
    ### Grant type refresh\_token
    
    In general the access tokens have limited validity. You can have a look
    at the **expires\_in** property of the response in the previous example
    to understand when a token expires. To get a fresh **access\_token** you
    can make another roundtrip to the server and use **refresh\_token**
    which allows you to get an updated token without needing to ask for the
    user credentials one more time.
    
        SERVER="https://play.dhis2.org/dev"
        SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"
        REFRESH_TOKEN="a4e4de45-4743-481d-9345-2cfe34732fcc"
        
        curl -X POST -H "Accept: application/json" -u demo:$SECRET $SERVER/uaa/oauth/token
        -d grant_type=refresh_token -d refresh_token=$REFRESH_TOKEN
    
    The response will be exactly the same as when you get an token to start
    with.
    
    ### Grant type authorization\_code
    
    Authorized code grant type is the recommended approach if you don't want
    to store the user credentials externally. It allows DHIS2 to collect the
    username/password directly from the user instead of the client
    collecting them and then authenticating on behalf of the user. Please be
    aware that this approach uses the **redirect\_uris** part of the client
    payload.
    
    Step 1: Using a browser visit this URL (if you have more than one
    redirect URIs, you might want to add
    \&redirect\_uri=http://www.example.org) :
    
        SERVER="https://play.dhis2.org/dev"
        
        $SERVER/uaa/oauth/authorize?client_id=demo&response_type=code
    
    Step 2: After the user have successfully logged in and accepted your
    client access, it will redirect back to your redirect uri like this:
    
        http://www.example.org/?code=XYZ
    
    Step 3: This step is similar to what we did in the password grant type,
    using the given code, we will now ask for a access token:
    
        SERVER="https://play.dhis2.org/dev"
        SECRET="1e6db50c-0fee-11e5-98d0-3c15c2c6caf6"
        
        curl -X POST -u demo:$SECRET -H "Accept: application/json" $SERVER/uaa/oauth/token
          -d grant_type=authorization_code -d code=XYZ
    
    # Error and info messages
    
    The Web API uses a consistent format for all error/warning and
    informational messages:
    
        {
           "httpStatus" : "Forbidden",
           "message" : "You don't have the proper permissions to read objects of this type.",
           "httpStatusCode" : 403,
           "status" : "ERROR"
        }
    
    Here we can see from the message that the user tried to access a
    resource I did not have access to. It uses the http status code 403, the
    http status message **forbidden** and a descriptive message.
    
    <table>
    <caption>WebMessage properties</caption>
    <colgroup>
    <col width="13%" />
    <col width="86%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th>Name</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>httpStatus</td>
    <td>HTTP Status message for this response, see RFC 2616 (Section 10) for more information.</td>
    </tr>
    <tr class="even">
    <td>httpStatusCode</td>
    <td>HTTP Status code for this response, see RFC 2616 (Section 10) for more information.</td>
    </tr>
    <tr class="odd">
    <td>status</td>
    <td>DHIS2 status, possible values are <em>OK</em> | <em>WARNING</em> | <em>ERROR</em>, where <strong>OK</strong> is means everything was successful, <strong>ERROR</strong> means that operation did not complete and <strong>WARNING</strong> means operation was partially successful, if there message contains a <strong>response</strong> property, please look there for more information.</td>
    </tr>
    <tr class="even">
    <td>message</td>
    <td>A user friendly message telling whether the operation was a success or not.</td>
    </tr>
    <tr class="odd">
    <td>devMessage</td>
    <td>A more techincal developer friendly message (not currently in use).</td>
    </tr>
    <tr class="even">
    <td>response</td>
    <td>Extension point for future extension to the WebMessage format. This will be documented when it starts being used.</td>
    </tr>
    </tbody>
    </table>

    
    # Date and period format
    
    Throughout the Web API we refer to dates and periods. The date format is:
    
        yyyy-MM-dd
    
    For instance, if you want to express March 20, 2014 you must use *2014-03-20*.

    
    The period format is described in the following table (also available on
    API endpoint */api/periodTypes*)
    
    <table style="width:100%;">
    <caption>Period format</caption>
    <colgroup>
    <col width="24%" />
    <col width="21%" />
    <col width="18%" />
    <col width="35%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th>Interval</th>
    <th>Format</th>
    <th>Example</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>Day</td>
    <td><em>yyyyMMdd</em></td>
    <td>20040315</td>
    <td>March 15 2004</td>
    </tr>
    <tr class="even">
    <td>Week</td>
    <td><em>yyyy</em>W<em>n</em></td>
    <td>2004W10</td>
    <td>Week 10 2004</td>
    </tr>
    <tr class="odd">
    <td>Week Wednesday</td>
    <td><em>yyyy</em>WedW<em>n</em></td>
    <td>2015WedW5</td>
    <td>Week 5 with start Wednesday</td>
    </tr>
    <tr class="even">
    <td>Week Thursday</td>
    <td><em>yyyy</em>ThuW<em>n</em></td>
    <td>2015ThuW6</td>
    <td>Week 6 with start Thursday</td>
    </tr>
    <tr class="odd">
    <td>Week Saturday</td>
    <td><em>yyyy</em>SatW<em>n</em></td>
    <td>2015SatW7</td>
    <td>Week 7 with start Saturday</td>
    </tr>
    <tr class="even">
    <td>Week Sunday</td>
    <td><em>yyyy</em>SunW<em>n</em></td>
    <td>2015SunW8</td>
    <td>Week 8 with start Sunday</td>
    </tr>
    <tr class="odd">
    <td>Month</td>
    <td><em>yyyyMM</em></td>
    <td>200403</td>
    <td>March 2004</td>
    </tr>
    <tr class="even">
    <td>Quarter</td>
    <td><em>yyyy</em>Q<em>n</em></td>
    <td>2004Q1</td>
    <td>January-March 2004</td>
    </tr>
    <tr class="odd">
    <td>Six-month</td>
    <td><em>yyyy</em>S<em>n</em></td>
    <td>2004S1</td>
    <td>January-June 2004</td>
    </tr>
    <tr class="even">
    <td>Six-month April</td>
    <td><em>yyyy</em>AprilSn</td>
    <td>2004AprilS1</td>
    <td>April-September 2004</td>
    </tr>
    <tr class="odd">
    <td>Year</td>
    <td>yyyy</td>
    <td>2004</td>
    <td>2004</td>
    </tr>
    <tr class="even">
    <td>Financial Year April</td>
    <td>yyyyApril</td>
    <td>2004April</td>
    <td>Apr 2004-Mar 2005</td>
    </tr>
    <tr class="odd">
    <td>Financial Year July</td>
    <td>yyyyJuly</td>
    <td>2004July</td>
    <td>July 2004-June 2005</td>
    </tr>
    <tr class="even">
    <td>Financial Year Oct</td>
    <td>yyyyOct</td>
    <td>2004Oct</td>
    <td>Oct 2004-Sep 2005</td>
    </tr>
    </tbody>
    </table>
    
    In some parts of the API, like for the analytics resource, you can
    utilize relative periods in addition to fixed periods (defined above).
    The relative periods are relative to the current date, and allows e.g.
    for creating dynamic reports. The available relative period values are:
      THIS_WEEK, LAST_WEEK, LAST_4_WEEKS, LAST_12_WEEKS, LAST_52_WEEKS,
      THIS_MONTH, LAST_MONTH, THIS_BIMONTH, LAST_BIMONTH, THIS_QUARTER, LAST_QUARTER,
      THIS_SIX_MONTH, LAST_SIX_MONTH, MONTHS_THIS_YEAR, QUARTERS_THIS_YEAR,
      THIS_YEAR, MONTHS_LAST_YEAR, QUARTERS_LAST_YEAR, LAST_YEAR, LAST_5_YEARS, LAST_12_MONTHS,
      LAST_3_MONTHS, LAST_6_BIMONTHS, LAST_4_QUARTERS, LAST_2_SIXMONTHS, THIS_FINANCIAL_YEAR,
      LAST_FINANCIAL_YEAR, LAST_5_FINANCIAL_YEARS



    
    # Identifier schemes
    
    This section provides an explanation of the identifier scheme concept.
    Identifier schemes are used to map metadata objects to other metadata
    during import, and to render metadata as part of exports. Please note
    that not all schemes works for all web-api calls, and not not all
    schemes can be used for both input and output (this is outlined in the
    sections explaining the various Web APIs).
    
    The full set of identifier scheme object types available are listed
    below, using the name of the property to use in queries:
    
      - idScheme
    
      - dataElementIdScheme
    
      - categoryOptionComboIdScheme
    
      - orgUnitIdScheme
    
      - programIdScheme
    
      - programStageIdScheme
    
      - trackedEntityIdScheme
    
      - trackedEntityAttributeIdScheme
    
    The general idScheme applies to all types of objects. It can be
    overriden by specific object types.
    
    The default scheme for all parameters is UID (stable DHIS 2
    identifiers). The supported identifier schemes are described in the
    table below.
    
    <table>
    <caption>Scheme Values</caption>
    <colgroup>
    <col width="14%" />
    <col width="85%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th>Scheme</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>ID, UID</td>
    <td>Match on DHIS2 stable Identifier, this is the default id scheme.</td>
    </tr>
    <tr class="even">
    <td>CODE</td>
    <td>Match on DHIS2 Code, mainly used to exchange data with an external system.</td>
    </tr>
    <tr class="odd">
    <td>NAME</td>
    <td>Match on DHIS2 Name, please not that this uses what is available as <em>object.name</em>, and not the translated name. Also not that names are not always unique, and in that case they can not be used.</td>
    </tr>
    <tr class="even">
    <td>ATTRIBUTE:ID</td>
    <td>Match on metadata attribute, this attribute needs to be assigned to the type you are matching on, and also that the unique property is set to <em>true</em>. The main usage of this is also to exchange data with external systems, it has some advantages over <em>CODE</em> since multiple attributes can be added, so it can be used to synchronize with more than one system.</td>
    </tr>
    </tbody>
    </table>
    
    Note that identifier schemes is not an independent feature but needs to
    be used in combination with resources such as data value import and meta
    data import.
    
    As an example, to specify CODE as the general id scheme and override
    with UID for organisation unit id scheme you can use these query
    parameters:
    
        ?idScheme=CODE&orgUnitIdScheme=UID
    
    As another example, to specify an attribute for the organisation unit id
    scheme, code for the data element id scheme and use the default UID id
    scheme for all other objects you can use these parameters:
    
        ?orgUnitIdScheme=ATTRIBUTE:j38fk2dKFsG&dataElementIdScheme=CODE
    
    # Browsing the Web API
    
    The entry point for browsing the Web API is */api/*. This resource
    provide links to all available resources. Four resource representation
    formats are consistently available for all resources: HTML, XML, JSON
    and JSONP. Some resources will have other formats available, like MS
    Excel, PDF, CSV and PNG. To explore the API from a web browser, navigate
    to the */api/* entry point and follow the links to your desired
    resource, for instance */api/dataElements*. For all resources which
    return a list of elements certain query parameters can be used to modify
    the response:
    
    <table style="width:100%;">
    <caption>Query parameters</caption>
    <colgroup>
    <col width="11%" />
    <col width="20%" />
    <col width="12%" />
    <col width="54%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th>Param</th>
    <th>Option values</th>
    <th>Default option</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>paging</td>
    <td>true | false</td>
    <td>true</td>
    <td>Indicates whether to return lists of elements in pages.</td>
    </tr>
    <tr class="even">
    <td>page</td>
    <td>number</td>
    <td>1</td>
    <td>Defines which page number to return.</td>
    </tr>
    <tr class="odd">
    <td>pageSize</td>
    <td>number</td>
    <td>50</td>
    <td>Defines the number of elements to return for each page.</td>
    </tr>
    <tr class="even">
    <td>order</td>
    <td>property:asc/iasc/desc/idesc</td>
    <td></td>
    <td>Order the output using a specified order, only properties that are both persisted and simple (no collections, idObjects etc) are supported. iasc and idesc are case insensitive sorting.</td>
    </tr>
    </tbody>
    </table>
    
    An example of how these parameters can be used to get a full list of
    data element groups in XML response format is:
    
        /api/26/dataElementGroups.xml?links=false&paging=false
    
    You can query for elements on the name property instead of returning
    full list of elements using the *query* query variable. In this example
    we query for all data elements with the word "anaemia" in the name:
    
        /api/26/dataElements?query=anaemia
    
    You can get specific pages and page sizes of objects like this:
    
        /api/26/dataElements.json?page=2&pageSize=20
    
    You can completely disable paging like this:
    
        /api/26/indicatorGroups.json?paging=false
    
    To order the result based on a specific property:
    
        /api/26/indicators.json?order=shortName:desc
    
    You can find an object based on its ID across all object types through
    the *identifiableObjects* resource:
    
        /api/26/identifiableObjects/<id>
    
    ## Translation
    
    DHIS2 supports translations of database content, such as data elements,
    indicators and programs. All metadata objects in the Web API have
    properties meant to be used for display / UI purposes, which includes
    *displayName*, *displayShortName* and *displayDescription*.
    
    <table>
    <caption>Translate options</caption>
    <colgroup>
    <col width="20%" />
    <col width="16%" />
    <col width="62%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th>Parameter</th>
    <th>Values</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>translate</td>
    <td>true | false</td>
    <td>Translate display* properties in metadata output (displayName, displayShortName, displayDescription, and displayFormName for data elements). Default value is true.</td>
    </tr>
    <tr class="even">
    <td>locale</td>
    <td>Locale to use</td>
    <td>Translate metadata output using a specified locale (requires translate=true).</td>
    </tr>
    </tbody>
    </table>
    
    ## Translation API
    
    The translations for an object is rendered as part of the object itself
    in the *translations* array. Note that the *translations* array in the
    JSON/XML payloads are normally pre-filtered for you, which means they
    can not directly be used to import/export translations (as that would
    normally overwrite locales other than current users).
    
    *Example of data element with translation array filtered on user
    locale:*
    
        {
          "id": "FTRrcoaog83",
          "displayName": "Accute French",
          "translations": [
            {
              "property": "SHORT_NAME",
              "locale": "fr",
              "value": "Accute French"
            },
            {
              "property": "NAME",
              "locale": "fr",
              "value": "Accute French"
            }
          ]
        }
    
    *Example of data element with translations turned off:*
    
        {
          "id": "FTRrcoaog83",
          "displayName": "Accute Flaccid Paralysis (Deaths < 5 yrs)",
          "translations": [
            {
              "property": "FORM_NAME",
              "locale": "en_FK",
              "value": "aa"
            },
            {
              "property": "SHORT_NAME",
              "locale": "en_GB",
              "value": "Accute Flaccid Paral"
            },
            {
              "property": "SHORT_NAME",
              "locale": "fr",
              "value": "Accute French"
            },
            {
              "property": "NAME",
              "locale": "fr",
              "value": "Accute French"
            },
            {
              "property": "NAME",
              "locale": "en_FK",
              "value": "aa"
            },
            {
              "property": "DESCRIPTION",
              "locale": "en_FK",
              "value": "aa"
            }
          ]
        }
    
    Note that even if you get the unfiltered result, and are using the
    appropriate type endpoint i..e */api/26/dataElements* we do not allow
    updates, as it would be too easy to make mistakes and overwrite the
    other available locales.
    
    To read and update translations you can use the special translations
    endpoint for each object resource. These can be accessed by **GET** or
    **PUT** on the appropriate
    */api/26/\<object-type\>/\<object-id\>/translations* endpoint. As an
    example, for a data element with identifier *FTRrcoaog83* you could use
    */api/26/dataElements/FTRrcoaog83/translations* to get and update
    translations. The fields available are *property* with options **NAME**,
    **SHORT\_NAME**, **DESCRIPTION**, the *locale* which supports any valid
    locale ID and the the *value* itself.
    
    *Example of NAME property for french locale:*
    
        {
          "property": "NAME",
          "locale": "fr",
          "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
        }
    
    This payload would then be added to a translation array, and sent back
    to the appropriate endpoint:
    
        {
          "translations": [
            {
              "property": "NAME",
              "locale": "fr",
              "value": "Paralysie Flasque Aiguë (Décès <5 ans)"
            }
          ]
        }
    
    For a an data element with ID *FTRrcoaog83* you can **PUT** this to
    */api/26/dataElements/FTRrcoaog83/translations*. Make sure to send all
    translations for the specific object and not just for a single locale
    (if not you will potentially overwrite existing locales for other
    locales).
    
    # Metadata object filter
    
    To filter the metadata there are several filter operations that can be
    applied to the returned list of metadata. The format of the filter
    itself is straight-forward and follows the pattern
    *property:operator:value*, where *property* is the property on the
    metadata you want to filter on, *operator* is the comparison operator
    you want to perform and *value* is the value to check against (not all
    operators require value). Please see the *schema* section to discover
    which properties are available. Recursive filtering, ie. filtering on
    associated objects or collection of objects, are supported as well.
    
    <table>
    <caption>Available Operators</caption>
    <thead>
    <tr class="header">
    <th>Operator</th>
    <th>Types</th>
    <th>Value required</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>eq</td>
    <td>string | boolean | integer | float | enum | collection (checks for size) | date</td>
    <td>true</td>
    <td>Equality</td>
    </tr>
    <tr class="even">
    <td>!eq</td>
    <td>string | boolean | integer | float | enum | collection (checks for size) | date</td>
    <td>true</td>
    <td>Inequality</td>
    </tr>
    <tr class="odd">
    <td>ne</td>
    <td>string | boolean | integer | float | enum | collection (checks for size) | date</td>
    <td>true</td>
    <td>Inequality</td>
    </tr>
    <tr class="even">
    <td>like</td>
    <td>string</td>
    <td>true</td>
    <td>Case sensitive string, match anywhere</td>
    </tr>
    <tr class="odd">
    <td>!like</td>
    <td>string</td>
    <td>true</td>
    <td>Case sensitive string, not match anywhere</td>
    </tr>
    <tr class="even">
    <td>$ike</td>
    <td>string</td>
    <td>true</td>
    <td>Case sensitive string, match start</td>
    </tr>
    <tr class="odd">
    <td>!$like</td>
    <td>string</td>
    <td>true</td>
    <td>Case sensitive string, not match start</td>
    </tr>
    <tr class="even">
    <td>like$</td>
    <td>string</td>
    <td>true</td>
    <td>Case sensitive string, match end</td>
    </tr>
    <tr class="odd">
    <td>!like$</td>
    <td>string</td>
    <td>true</td>
    <td>Case sensitive string, not match end</td>
    </tr>
    <tr class="even">
    <td>ilike</td>
    <td>string</td>
    <td>true</td>
    <td>Case insensitive string, match anywhere</td>
    </tr>
    <tr class="odd">
    <td>!ilike</td>
    <td>string</td>
    <td>true</td>
    <td>Case insensitive string, not match anywhere</td>
    </tr>
    <tr class="even">
    <td>$ilike</td>
    <td>string</td>
    <td>true</td>
    <td>Case insensitive string, match start</td>
    </tr>
    <tr class="odd">
    <td>!$ilike</td>
    <td>string</td>
    <td>true</td>
    <td>Case insensitive string, not match start</td>
    </tr>
    <tr class="even">
    <td>ilike$</td>
    <td>string</td>
    <td>true</td>
    <td>Case insensitive string, match end</td>
    </tr>
    <tr class="odd">
    <td>!ilike$</td>
    <td>string</td>
    <td>true</td>
    <td>Case insensitive string, not match end</td>
    </tr>
    <tr class="even">
    <td>gt</td>
    <td>string | boolean | integer | float | collection (checks for size) | date</td>
    <td>true</td>
    <td>Greater than</td>
    </tr>
    <tr class="odd">
    <td>ge</td>
    <td>string | boolean | integer | float | collection (checks for size) | date</td>
    <td>true</td>
    <td>Greater than or equal</td>
    </tr>
    <tr class="even">
    <td>lt</td>
    <td>string | boolean | integer | float | collection (checks for size) | date</td>
    <td>true</td>
    <td>Less than</td>
    </tr>
    <tr class="odd">
    <td>le</td>
    <td>string | boolean | integer | float | collection (checks for size) | date</td>
    <td>true</td>
    <td>Less than or equal</td>
    </tr>
    <tr class="even">
    <td>null</td>
    <td>all</td>
    <td>false</td>
    <td>Property is null</td>
    </tr>
    <tr class="odd">
    <td>!null</td>
    <td>all</td>
    <td>false</td>
    <td>Property is not null</td>
    </tr>
    <tr class="even">
    <td>empty</td>
    <td>collection</td>
    <td>false</td>
    <td>Collection is empty</td>
    </tr>
    <tr class="odd">
    <td>token</td>
    <td>string</td>
    <td>true</td>
    <td>Match on multiple tokens in search property</td>
    </tr>
    <tr class="even">
    <td>!token</td>
    <td>string</td>
    <td>true</td>
    <td>Not match on multiple tokens in search property</td>
    </tr>
    <tr class="odd">
    <td>in</td>
    <td>string | boolean | integer | float | date</td>
    <td>true</td>
    <td>Find objects matching 1 or more values</td>
    </tr>
    <tr class="even">
    <td>!in</td>
    <td>string | boolean | integer | float | date</td>
    <td>true</td>
    <td>Find objects not matching 1 or more values</td>
    </tr>
    </tbody>
    </table>
    
    Operators will be applied as logical **and** query, if you need a **or**
    query, you can have a look at our *in* filter (also have a look at the
    section below). The filtering mechanism allows for recursion. See below
    for some examples.
    
    Get data elements with id property ID1 or ID2:
    
        /api/26/dataElements?filter=id:eq:ID1&filter=id:eq:ID2
    
    Get all data elements which has the dataSet with id ID1:
    
        /api/26/dataElements?filter=dataSetElements.dataSet.id:eq:ID1
    
    Get all data elements with aggregation operator "sum" and value type
    "int":
    
        /api/26/dataElements.json?filter=aggregationOperator:eq:sum&filter=type:eq:int
    
    You can do filtering within collections, e.g. to get data elements which
    are members of the "ANC" data element group you can use the following
    query using the id property of the associated data element groups:
    
        /api/26/dataElements.json?filter=dataElementGroups.id:eq:qfxEYY9xAl6
    
    Since all operators are **and** by default, you can't find a data
    element matching more than one id, for that purpose you can use the *in*
    operator.
    
        /api/26/dataElements.json?filter=id:in:[fbfJHSPpUQD,cYeuwXTCPkU]
    
    ## Logical operators
    
    As mentioned in the section before, the default logical operator applied
    to the filters are **AND** which means that all object filters must be
    matched. There are however cases where you want to match on one of
    several filters (maybe id and code field) and in those cases it is
    possible to switch the root logical operator from **AND** to **OR**
    using the *rootJunction* parameter.
    
    Example: Normal filtering where both id and code must match to have a
    result returned
    
        /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1
    
    Example: Filtering where the logical operator has been switched to OR
    and now only one of the filters must match to have a result
        returned
    
        /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1&rootJunction=OR
    
    # Metadata field filter
    
    In certain situations the default views of the metadata can be too
    verbose. A client might only need a few fields from each object and want
    to remove unnecessary fields from the response. To discover which fields
    are available for each object please see the *schema* section.
    
    The format for include/exclude is very simple and allows for infinite
    recursion. To filter at the "root" level you can just use the name of
    the field, i.e. *?fields=id,name* which would only display the *id* and
    *name* for every object. For objects that are either collections or
    complex objects with properties on their own you can use the format
    *?fields=id,name,dataSets\[id,name\]* which would return *id*, *name* of
    the root, and the *id* and *name* of every data set on that object.
    Negation can be done with the exclamation operator, and we have a set of
    presets of field select (see below). Both XML and JSON are supported.
    
    **Example**: Get *id* and *name* on the indicators resource:
    
        /api/26/indicators?fields=id,name
    
    **Example**: Get *id* and *name* from dataElements, and *id* and *name*
    from the dataSets on dataElements:
    
        /api/26/dataElements?fields=id,name,dataSets[id,name]
    
    To exclude a field from the output you can use the exclamation (\!)
    operator. This is allowed anywhere in the query and will simply not
    include that property (as it might have been inserted in some of the
    presets).
    
    A few presets (selected fields groups) are available and can be applied
    using the ':' operator.
    
    <table>
    <caption>Property operators</caption>
    <colgroup>
    <col width="25%" />
    <col width="74%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th>Operator</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>&lt;field-name&gt;</td>
    <td>Include property with name, if it exists.</td>
    </tr>
    <tr class="even">
    <td>&lt;object&gt;[&lt;field-name&gt;, ...]</td>
    <td>Includes a field within either a collection (will be applied to every object in that collection), or just on a single object.</td>
    </tr>
    <tr class="odd">
    <td>!&lt;field-name&gt;, &lt;object&gt;[!&lt;field-name&gt;</td>
    <td>Do not include this field name, also works inside objects/collections. Useful when you use a preset to inlude fields.</td>
    </tr>
    <tr class="even">
    <td>*, &lt;object&gt;[*]</td>
    <td>Include all fields on a certain object, if applied to a collection, it will include all fields on all objects on that collection.</td>
    </tr>
    <tr class="odd">
    <td>:&lt;preset&gt;</td>
    <td>Alias to select multiple fields. Three presets are currently available, see table below for descriptions.</td>
    </tr>
    </tbody>
    </table>
    
    <table>
    <caption>Field presets</caption>
    <colgroup>
    <col width="25%" />
    <col width="74%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th>Preset</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>all</td>
    <td>All fields of the object</td>
    </tr>
    <tr class="even">
    <td>*</td>
    <td>Alias for all</td>
    </tr>
    <tr class="odd">
    <td>identifiable</td>
    <td>Includes id, name, code, created and lastUpdated fields</td>
    </tr>
    <tr class="even">
    <td>nameable</td>
    <td>Includes id, name, shortName, code, description, created and lastUpdated fields</td>
    </tr>
    <tr class="odd">
    <td>persisted</td>
    <td>Returns all persisted property on a object, does not take into consideration if the object is the owner of the relation.</td>
    </tr>
    <tr class="even">
    <td>owner</td>
    <td>Returns all persisted property on a object where the object is the owner of all properties, this payload can be used to update through the web-api.</td>
    </tr>
    </tbody>
    </table>
    
    **Example**: Include all fields from dataSets except organisationUnits:
    
        /api/26/dataSets?fields=:all,!organisationUnits
    
    **Example**: Include only id, name and the collection of organisation
    units from a data set, but exclude the id from organisation
        units:
    
        /api/26/dataSets/BfMAe6Itzgt?fields=id,name,organisationUnits[:all,!id]
    
    **Example**: Include nameable properties from all indicators:
    
        /api/26/indicators.json?fields=:nameable
    
    ## Field transformers
    
    In DHIS2.17 we introduced field transformers, the idea is to allow
    further customization of the properties on the server side.
    
        /api/26/dataElements/ID?fields=id~rename(i),name~rename(n)
    
    This will rename the *id* property to *i* and *name* property to *n*.
    
    Multipe transformers can be used by repeating the transformer
        syntax:
    
        /api/26/dataElementGroups.json?fields=id,displayName,dataElements~isNotEmpty~rename(haveDataElements)
    
    <table>
    <caption>Available Transformers</caption>
    <colgroup>
    <col width="33%" />
    <col width="21%" />
    <col width="44%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th>Name</th>
    <th>Arguments</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>size</td>
    <td></td>
    <td>Gives sizes of strings (length) and collections</td>
    </tr>
    <tr class="even">
    <td>isEmpty</td>
    <td></td>
    <td>Is string or collection empty</td>
    </tr>
    <tr class="odd">
    <td>isNotEmpty</td>
    <td></td>
    <td>Is string or collection not empty</td>
    </tr>
    <tr class="even">
    <td>rename</td>
    <td>Arg1: name</td>
    <td>Renames the property name</td>
    </tr>
    <tr class="odd">
    <td>paging</td>
    <td>Arg1: page,Arg2: pageSize</td>
    <td>Pages a collection, default pageSize is 50.</td>
    </tr>
    </tbody>
    </table>
    
    ### Examples
    
    Examples of transformer
        usage.
    
        /api/26/dataElements?fields=dataSets~size
    
        /api/26/dataElements?fields=dataSets~isEmpty
    
        /api/26/dataElements?fields=dataSets~isNotEmpty
    
        /api/26/dataElements/ID?fields=id~rename(i),name~rename(n)
    
        /api/26/dataElementGroups?fields=id,displayName,dataElements~paging(1;20)
    
    
    # Metadata create, read, update, delete, validate
    
    While some of the web-api endpoints already contains support for CRUD
    (create, read, update, delete), from version 2.15 this is now supported
    on all endpoints. It should work as you expect, and the subsections will
    give more detailed information about create, update, and delete (read is
    already covered elsewhere, and have been supported for a long time).
    
    ## Create / update parameters
    
    The following query parameters are available for customizing your
    request.
    
    <table>
    <caption>Available Query Filters</caption>
    <thead>
    <tr class="header">
    <th>Param</th>
    <th>Type</th>
    <th>Required</th>
    <th>Options (default first)</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>preheatCache</td>
    <td>boolean</td>
    <td>false</td>
    <td>true | false</td>
    <td>Turn cache-map preheating on/off. This is on by default, turning this off will make initial load time for importer much shorter (but will make the import itself slower). This is mostly used for cases where you have a small XML/JSON file you want to import, and don't want to wait for cache-map preheating.</td>
    </tr>
    <tr class="even">
    <td>strategy</td>
    <td>enum</td>
    <td>false</td>
    <td>CREATE_AND_UPDATE | CREATE | UPDATE | DELETE</td>
    <td>Import strategy to use, see below for more information.</td>
    </tr>
    <tr class="odd">
    <td>mergeMode</td>
    <td>enum</td>
    <td>false</td>
    <td>REPLACE, MERGE</td>
    <td>Strategy for merging of objects when doing updates. REPLACE will just overwrite the propery with the new value provided, MERGE will only set the property if its not null (only if the property was provided).</td>
    </tr>
    </tbody>
    </table>
  termsOfService: ''
  title: DHIS2 API
  version: '2.30'
  x-logo:
    url: dhis2_logo.png
servers:
  - description: localhost
    url: 'http://localhost:8080/api'
  - description: DHIS2 demo server
    url: 'https://play.dhis2.org/{version}/api'
    variables:
      version:
        default: '2.30'
        description: DHIS 2 release version
        enum:
          - '2.29'
          - '2.30'
          - dev
externalDocs:
  description: ''
  url: 'https://www.dhis2.org/documentation'
  x-status-dhis2: draft
security:
  - basicAuth: []
  - oAuth: []
tags:
  - description: /
    name: ''
    x-status: draft
  - description: 'Constants are static values which can be made available to users for use in data elements and indicators. Some indicators, such as "Couple year protection rate" depend on constants which usually do not change over time.'
    name: constants
    x-status: draft
  - description: 'Tracked entity instances have full CRUD (create, read, update, delete) support in the Web-API. Together with the API for enrollment most operations needed for working with tracked entity instances and programs are supported.'
    name: trackedEntityInstances
    x-status: draft
x-tagGroups:
  - name: User Management
    tags: []
  - name: Analytics
    tags:
      - constants
  - name: Tracker
    tags:
      - trackedEntityInstances
paths:
  /constants:
    get:
      summary: list constants
      parameters:
        - $ref: '#/components/parameters/query/paging'
        - $ref: '#/components/parameters/query/page'
        - $ref: '#/components/parameters/query/pageSize'
        - $ref: '#/components/parameters/query/order'
        - $ref: '#/components/parameters/filters/filter'
        - $ref: '#/components/parameters/filters/field'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  pager:
                    $ref: '#/components/schemas/pagination'
                  constants:
                    items:
                      $ref: '#/components/schemas/constant'
                    maxItems: 1.7976931348623157e+308
                    minItems: 0
                    readOnly: false
                    type: array
            text/plain:
              schema:
                example: OK
                type: string
          description: OK
      tags:
        - constants
    post:
      summary: create a new constant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/constant'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              example:
                httpStatus: Created
                httpStatusCode: 201
                status: OK
                response:
                  responseType: ObjectReport
                  uid: n0fDatA2aGT
                  klass: org.hisp.dhis.constant.Constant
            text/plain:
              schema:
                example: OK
                type: string
          links:
            getConstantById:
              operationId: getConstant
              parameters:
                id: '$response.body#/response/uid'
            updateConstantById:
              operationId: updateConstant
              parameters:
                id: '$response.body#/response/uid'
            deleteConstantById:
              operationId: deleteConstant
              parameters:
                id: '$response.body#/response/uid'
          description: Created
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              example:
                httpStatus: Conflict
                httpStatusCode: 409
                status: ERROR
                message: 'One more more errors occurred, please see full details in import report.'
                response:
                  responseType: ObjectReport
                  klass: org.hisp.dhis.constant.Constant
                  errorReports:
                    - message: "Property `code`\_with value `string` on object string [Xjgjm7FnhB8] (Constant)\_already exists on object QOnFkMZOLiD."
                      mainKlass: org.hisp.dhis.constant.Constant
                      mainId: QOnFkMZOLiD
                      errorProperty: code
                      errorCode: E5003
                    - message: "Property `shortName`\_with value `string` on object string [Xjgjm7FnhB8] (Constant)\_already exists on object QOnFkMZOLiD."
                      mainKlass: org.hisp.dhis.constant.Constant
                      mainId: QOnFkMZOLiD
                      errorProperty: shortName
                      errorCode: E5003
            text/plain:
              schema:
                example: ERROR
                type: string
          description: Conflict
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              example:
                httpStatus: Internal Server Error
                httpStatusCode: 500
                status: ERROR
                message: |-
                  Can not construct instance of double from String value ("haha"): not a valid Double value
                   at [Source: org.apache.catalina.connector.CoyoteInputStream@4bc73863; line: 11, column: 9] (through reference chain: org.hisp.dhis.constant.Constant["value"])
            text/plain:
              schema:
                example: ERROR
                type: string
          description: Internal Server Error
      tags:
        - constants
  '/constants/{id}':
    get:
      summary: get a constant by ID
      operationId: getConstant
      parameters:
          - $ref: '#/components/parameters/filters/filter'
          - $ref: '#/components/parameters/filters/field'
          - description: unique id of the constant in the system.
            in: path
            name: id
            schema:
              $ref: '#/components/schemas/constant/properties/id'
            required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/constant'
            text/plain:
              schema:
                example: OK
                type: string
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              x-description: 'Webmessage containing error response(s). See <a href=''#section/Error-and-info-messages''>Error-and-info-messages</a>.'
              example:
                httpStatus: Not Found
                httpStatusCode: 404
                status: ERROR
                message: Constant with id FuG5VuW9VB could not be found.
            text/plain:
              schema:
                example: ERROR
                type: string
          description: Not Found
      tags:
        - constants
    put:
      summary: update a constant
      parameters:
        - description: unique id of the constant in the system.
          in: path
          name: id
          schema:
            $ref: '#/components/schemas/constant/properties/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/constant'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              example:
                httpStatus: Created
                httpStatusCode: 200
                status: OK
                response:
                  responseType: ObjectReport
                  uid: n0fDatA2aGT
                  klass: org.hisp.dhis.constant.Constant
            text/plain:
              schema:
                example: OK
                type: string
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              x-description: 'Webmessage containing error response(s). See <a href=''#section/Error-and-info-messages''>Error-and-info-messages</a>.'
              example:
                httpStatus: Not Found
                httpStatusCode: 404
                status: ERROR
                message: Constant with id FuG5VuW9VB could not be found.
            text/plain:
              schema:
                example: ERROR
                type: string
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              x-description: 'Webmessage containing error response(s). See <a href=''#section/Error-and-info-messages''>Error-and-info-messages</a>.'
              example:
                httpStatus: Conflict
                httpStatusCode: 409
                status: ERROR
                message: 'One more more errors occurred, please see full details in import report.'
                response:
                  responseType: ObjectReport
                  klass: org.hisp.dhis.constant.Constant
                  errorReports:
                    - message: "Property `shortName`\_with value `string` on object string [FuG5VuW9VEB] (Constant)\_already exists on object QOnFkMZOLiD."
                      mainKlass: org.hisp.dhis.constant.Constant
                      mainId: QOnFkMZOLiD
                      errorProperty: shortName
                      errorCode: E5003
            text/plain:
              schema:
                example: ERROR
                type: string
          description: Conflict
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              description: 'Webmessage containing error response(s). See <a href=''#section/Error-and-info-messages''>Error-and-info-messages</a>.'
              example:
                httpStatus: Internal Server Error
                httpStatusCode: 500
                status: ERROR
                message: |-
                  Can not construct instance of double from String value ("haha"): not a valid Double value
                   at [Source: org.apache.catalina.connector.CoyoteInputStream@4bc73863; line: 11, column: 9] (through reference chain: org.hisp.dhis.constant.Constant["value"])
            text/plain:
              schema:
                example: ERROR
                type: string
          description: Internal Server Error
      tags:
        - constants
    delete:
      summary: delete a constant by ID
      parameters:
        - description: unique id of the constant in the system.
          in: path
          name: id
          schema:
            $ref: '#/components/schemas/constant/properties/id'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              example:
                httpStatus: OK
                httpStatusCode: 200
                status: OK
                response:
                  responseType: ObjectReport
                  uid: FuG5VuW9VEB
                  klass: org.hisp.dhis.constant.Constant
            text/plain:
              schema:
                example: OK
                type: string
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              description: 'Webmessage containing error response(s). See <a href=''#section/Error-and-info-messages''>Error-and-info-messages</a>.'
              example:
                httpStatus: Not Found
                httpStatusCode: 404
                status: ERROR
                message: Constant with id FuG5VuW9VB could not be found.
            text/plain:
              schema:
                example: ERROR
                type: string
          description: Not Found
      tags:
        - constants
  /trackedEntityInstances:
    get:
      description: list tracked entity instances (TEIs)
      parameters:
        - $ref: '#/components/parameters/query/paging'
        - $ref: '#/components/parameters/query/page'
        - $ref: '#/components/parameters/query/pageSize'
        - $ref: '#/components/parameters/query/order'
        - $ref: '#/components/parameters/filters/filter'
        - $ref: '#/components/parameters/filters/field'
        - default: ''
          description: organisationUnit
          in: query
          name: ou
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  trackedEntityInstances:
                    items:
                      $ref: '#/components/schemas/trackedEntityInstance'
                      type: object
                    maxItems: 1.7976931348623157e+308
                    minItems: 0
                    readOnly: false
                    type: array
            text/plain:
              schema:
                example: OK
                type: string
          description: OK
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webmessage'
              description: 'Webmessage containing error response(s). See <a href=''#section/Error-and-info-messages''>Error-and-info-messages</a>.'
              example:
                httpStatus: Conflict
                httpStatusCode: 409
                status: ERROR
                message: At least one organisation unit must be specified
            text/plain:
              schema:
                example: ERROR
                type: string
          description: Conflict
      tags:
        - trackedEntityInstances
    post:
      description: create a new tracked entity instance
      parameters:
        - default: CREATE_AND_UPDATE
          description: ''
          in: query
          name: strategy
          required: false
      requestBody: {}
      tags:
        - trackedEntityInstances
components:
  callbacks:
    x-status-dhis2: template
  parameters:
    created:
      format: date-time
      maxLength: 255
      readOnly: true
      type: string
    code:
      format: uid
      maxLength: 50
      minLength: 0
      readOnly: false
      type: string
      x-unique: true
    name:
      maxLength: 230
      minLength: 1
      readOnly: false
      type: string
      x-unique: true
    query:
      paging:
        description: Indicates whether to return lists of elements in pages.
        in: query
        name: paging
        schema:
          default: true
          type: boolean
      page:
        description: Defines which page number to return.
        in: query
        name: page
        schema:
          default: 1
          type: integer
      pageSize:
        description: Defines the number of elements to return for each page.
        in: query
        name: pageSize
        schema:
          default: 50
          type: integer
      order:
        default: ''
        description: 'Order the output using a specified order, only properties that are both persisted and simple (no collections, idObjects etc) are supported. iasc and idesc are case insensitive sorting.'
        in: query
        name: order
        schema:
          type: string
          enum:
            - '<property>:asc'
            - '<property>:iasc'
            - '<property>:desc'
            - '<property>:idesc'
    filters:
      filter:
        default: ''
        description: 'Apply filter operations to the returned list of metadata. See <a href=''#section/Metadata-object-filter''>Metadata-object-filter</a>.'
        in: query
        name: filter
        schema:
          type: string
          format: 'property>:<operator>:<value'
      field:
        default: ''
        description: 'Limit the response to specific field(s). See <a href=''#section/Metadata-field-filter''>Metadata-field-filter</a>.'
        in: query
        name: field
        required: false
        schema:
          type: string
    constant:
      - in: path
        name: program
      - default: ''
        description: ''
        in: query
        name: stage
        required: false
      - default: ''
        description: ''
        in: query
        name: startDate
        required: false
      - default: ''
        description: ''
        in: query
        name: endDate
        required: false
  links:
    x-status-dhis2: template
  requestBodies:
    x-status-dhis2: template
  responses:
    x-status-dhis2: template
  schemas:
    webmessage:
      properties:
        httpStatus:
          description: 'HTTP Status message for this response, see RFC 2616 (Section 10) for more information.'
          maxLength: 255
          readOnly: true
          type: string
        httpStatusCode:
          description: 'HTTP Status code for this response, see RFC 2616 (Section 10) for more information.'
          maxLength: 255
          readOnly: true
          type: string
        status:
          description: DHIS2 status.
          readOnly: true
          type: string
          enum:
            - OK
            - WARNING
            - ERROR
        message:
          description: A user friendly message telling whether the operation was a success or not.
          maxLength: 255
          readOnly: true
          type: string
        response:
          schema:
            properties:
              oneOf:
                - $ref: '#/components/schemas/errorResponse'
          maxItems: 1
          minItems: 0
          readOnly: true
          type: object
      required:
        - attribute
      x-status-dhis2: template
    errorResponse:
      properties:
        responseType:
          type: string
        uid:
          type: string
        klass:
          description: The DHIS software class.
          type: string
        errorReports:
          type: string
      x-status-dhis2: template
    attribute:
      properties:
        attribute:
          format: uid
          minLength: 11
          maxLength: 11
          readOnly: false
          type: string
        created:
          format: date-time
          maxLength: 255
          readOnly: false
          type: string
        code:
          format: uid
          maxLength: 50
          minLength: 0
          readOnly: false
          type: string
        lastUpdated:
          format: date-time
          maxLength: 255
          readOnly: false
          type: string
        displayName:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
        valueType:
          enum:
            - TEXT
            - LONG_TEXT
            - LETTER
            - PHONE_NUMBER
            - EMAIL
            - BOOLEAN
            - TRUE_ONLY
            - DATE
            - DATETIME
            - TIME
            - NUMBER
            - UNIT_INTERVAL
            - PERCENTAGE
            - INTEGER
            - INTEGER_POSITIVE
            - INTEGER_NEGATIVE
            - INTEGER_ZERO_OR_POSITIVE
            - TRACKER_ASSOCIATE
            - USERNAME
            - FILE_RESOURCE
            - COORDINATE
            - ORGANISATION_UNIT
            - AGE
            - URL
            - IMAGE
          maxLength: 36
          readOnly: false
          type: string
        value:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
      required:
        - attribute
        - value
      x-status-dhis2: template
    attributeValue:
      properties:
        attribute:
          format: uid
          maxLength: 255
          readOnly: false
          type: string
        created:
          format: date-time
          maxLength: 255
          readOnly: false
          type: string
        lastUpdated:
          format: date-time
          maxLength: 255
          readOnly: false
          type: string
        value:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
      required:
        - attribute
      x-status-dhis2: template
    access:
      properties:
        read:
          default: true
          type: boolean
        update:
          default: false
          type: boolean
        externalize:
          default: false
          type: boolean
        delete:
          default: false
          type: boolean
        write:
          default: false
          type: boolean
        manage:
          default: false
          type: boolean
      x-status-dhis2: template
      readOnly: true
    pagination:
      properties:
        page:
          format: int32
          minimum: 1
          maximum: 255
          readOnly: true
          type: integer
        pageCount:
          format: int32
          minimum: 1
          maximum: 255
          readOnly: true
          type: integer
        total:
          description: total number of items found by the request
          format: int32
          minimum: 0
          maximum: 255
          readOnly: true
          type: integer
        pageSize:
          format: int32
          minimum: 1
          maximum: 255
          readOnly: true
          type: integer
      x-status-dhis2: template
    trackedEntityInstance:
      properties:
        access:
          format: <FILLIN>
          maxLength: 1.7976931348623157e+308
          minLength: 0
          readOnly: false
          type: object
        attributes:
          items:
            $ref: '#/components/schemas/attribute'
            type: object
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
        code:
          format: uid
          maxLength: 50
          minLength: 0
          readOnly: false
          type: string
        coordinates:
          format: geolication
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
        created:
          format: date-time
          maxLength: 255
          readOnly: false
          type: string
        createdAtClient:
          format: date-time
          maxLength: 255
          readOnly: false
          type: string
        deleted:
          format: boolean
          maxLength: 255
          readOnly: false
          type: boolean
        displayName:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
        enrollments:
          items:
            $ref: '#/components/schemas/enrollment'
            type: object
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
        externalAccess:
          format: boolean
          readOnly: false
          type: boolean
        favorite:
          format: boolean
          readOnly: true
          type: boolean
        featureType:
          enum:
            - NONE
            - MULTI_POLYGON
            - POLYGON
            - POINT
            - SYMBOL
          maxLength: 50
          readOnly: false
          type: string
        href:
          format: url
          maxLength: 1.7976931348623157e+308
          minLength: 0
          readOnly: false
          type: string
        id:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        inactive:
          format: boolean
          maxLength: 255
          readOnly: false
          type: boolean
        lastUpdated:
          format: date-time
          maxLength: 255
          readOnly: false
          type: string
        lastUpdatedAtClient:
          format: date-time
          maxLength: 255
          readOnly: false
          type: string
        lastUpdatedBy:
          format: uid
          maxLength: 255
          readOnly: false
          type: string
        name:
          maxLength: 2147483647
          minLength: 1
          readOnly: false
          type: string
        organisationUnit:
          format: uid
          maxLength: 255
          readOnly: false
          type: string
        programInstance:
          items:
            - format: uid
              type: string
            - minLength
            - maxLength
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: false
          type: array
        publicAccess:
          maxLength: 8
          minLength: 8
          readOnly: false
          type: string
        representative:
          format: uid
          maxLength: 255
          readOnly: false
          type: string
        trackedEntityAttributeValue:
          items: {}
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: false
          type: array
        trackedEntityType:
          format: uid
          maxLength: 255
          readOnly: false
          type: string
        translation:
          items: {}
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: false
          type: array
        user:
          format: uid
          readOnly: false
          type: string
        userAccess:
          items:
            schema:
              $ref: '#/components/schemas/userAccess'
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: false
          type: array
        userGroupAccess:
          items:
            schema:
              $ref: '#/components/schemas/userGroupAccess'
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: false
          type: array
      required:
        - organisationUnit
      x-status-dhis2: template
    translation:
      properties:
        property:
          minimum: 1
          maximum: 255
          readOnly: true
          type: string
        locale:
          minimum: 1
          maximum: 255
          readOnly: true
          type: string
        value:
          minLength: 0
          maxLength: 255
          readOnly: true
          type: string
      x-status-dhis2: template
    user:
      properties:
        id:
          format: uid
          minimum: 11
          maximum: 11
          readOnly: true
          type: string
      x-status-dhis2: template
      readOnly: true
    constant:
      properties:
        access:
          $ref: '#/components/schemas/access'
        attributeValues:
          items:
            $ref: '#/components/schemas/attributeValue'
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
        code:
          $ref: '#/components/parameters/code'
        created:
          $ref: '#/components/parameters/created'
        displayName:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
        description:
          maxLength: 2147483647
          minLength: 1
          readOnly: false
          type: string
        displayDescription:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
        externalAccess:
          readOnly: false
          type: boolean
          default: false
        favorite:
          readOnly: false
          type: boolean
          default: false
        href:
          format: uri
          maxLength: 1.7976931348623157e+308
          minLength: 0
          readOnly: true
          type: string
        id:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          maxLength: 255
          readOnly: true
          type: string
        lastUpdatedBy:
          $ref: '#/components/schemas/user'
        name:
          $ref: '#/components/parameters/name'
        publicAccess:
          maxLength: 8
          minLength: 8
          readOnly: true
          type: string
        shortName:
          maxLength: 50
          minLength: 1
          readOnly: false
          type: string
          x-unique: true
        displayShortName:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
        translations:
          items:
            $ref: '#/components/schemas/translation'
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
        favorites:
          items:
            $ref: '#/components/schemas/note'
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
          x-fixme: true
        user:
          $ref: '#/components/schemas/user'
        userAccesses:
          items:
            $ref: '#/components/schemas/userAccess'
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
        userGroupAccesses:
          items:
            $ref: '#/components/schemas/userGroupAccess'
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
        value:
          format: double
          maximum: 2147483647
          minimum: 0
          default: 0
          readOnly: false
          type: string
      required:
        - value
        - name
      x-status-dhis2: template
    enrollment:
      properties:
        created:
          $ref: '#/components/parameters/created'
        orgUnit:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        createdAtClient:
          format: date-time
          maxLength: 255
          readOnly: true
          type: string
        program:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        lastUpdated:
          format: date-time
          maxLength: 255
          readOnly: true
          type: string
        trackedEntityType:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        orgUnitName:
          readOnly: true
          type: string
        enrollmentDate:
          format: date-time
          maxLength: 255
          readOnly: true
          type: string
        followup:
          readOnly: false
          type: boolean
          default: false
        deleted:
          readOnly: false
          type: boolean
          default: false
        incidentDate:
          format: date-time
          maxLength: 255
          readOnly: true
          type: string
        status:
          enum:
            - ACTIVE
            - COMPLETED
            - CANCELLED
          maxLength: 50
          readOnly: false
          type: string
        notes:
          items:
            $ref: '#/components/schemas/note'
            type: object
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
        attributed:
          items:
            $ref: '#/components/schemas/attribute'
            type: object
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
        events:
          items:
            $ref: '#/components/schemas/event'
            type: object
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
      required: []
      x-status-dhis2: template
    event:
      properties:
        dueDate:
          format: date-time
          maxLength: 255
          readOnly: true
          type: string
        createdAtClient:
          format: date-time
          maxLength: 255
          readOnly: true
          type: string
        program:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        event:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        programStage:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        trackedEntityInstance:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        enrollment:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        enrollmentStatus:
          enum:
            - ACTIVE
            - COMPLETED
            - CANCELLED
          maxLength: 50
          readOnly: false
          type: string
        status:
          enum:
            - ACTIVE
            - COMPLETED
            - VISITED
            - SCHEDULE
            - OVERDUE
            - SKIPPED
          maxLength: 40
          readOnly: false
          type: string
        attributeCategoryOptions:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        lastUpdated:
          format: date-time
          maxLength: 255
          readOnly: true
          type: string
        created:
          format: date-time
          maxLength: 255
          readOnly: true
          type: string
        followup:
          readOnly: false
          type: boolean
          default: false
        deleted:
          readOnly: false
          type: boolean
          default: false
        attributeOptionCombo:
          format: uid
          maxLength: 11
          minLength: 11
          readOnly: false
          type: string
        dataValues:
          items:
            $ref: '#/components/schemas/dataValue'
            type: object
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
        notes:
          items:
            $ref: '#/components/schemas/note'
            type: object
          maxItems: 1.7976931348623157e+308
          minItems: 0
          readOnly: true
          type: array
      required: []
      x-status-dhis2: template
    note:
      properties:
        access:
          maxLength: 255
          minLength: 0
          readOnly: false
          type: string
        displayName:
          readOnly: true
          type: string
        id:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
        userUid:
          readOnly: true
          type: string
      required: []
      x-status-dhis2: template
    dataValue:
      properties:
        access:
          maxLength: 255
          minLength: 0
          readOnly: false
          type: string
        displayName:
          readOnly: true
          type: string
        id:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
        userUid:
          readOnly: true
          type: string
      required: []
      x-status-dhis2: template
    userAccess:
      properties:
        access:
          maxLength: 255
          minLength: 0
          readOnly: false
          type: string
        displayName:
          readOnly: true
          type: string
        id:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
        userUid:
          readOnly: true
          type: string
      required: []
      x-status-dhis2: template
    userGroupAccess:
      properties:
        access:
          maxLength: 255
          minLength: 0
          readOnly: false
          type: string
        displayName:
          readOnly: true
          type: string
        id:
          maxLength: 2147483647
          minLength: 0
          readOnly: false
          type: string
        userGroupUid:
          readOnly: true
          type: string
      required: []
      x-status-dhis2: template
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
      x-status-dhis2: template
    oAuth:
      openIdConnectUrl: 'https://play.dhis2.org/api/oAuthClients'
      type: openIdConnect
      x-status-dhis2: template
    x-status-dhis2: template
